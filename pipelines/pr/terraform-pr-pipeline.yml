trigger:
- none

pool:
  vmImage: ubuntu-latest

steps:
- task: TerraformInstaller@2
  inputs:
    terraformVersion: 'latest'

- task: TerraformCLI@2
  displayName: "Terraform init"
  inputs:
    command: 'init'
    backendType: 'azurerm'
    backendServiceArm: 'Free (fdfb7214-0920-4357-adc9-606754ea4522)'
    allowTelemetryCollection: false

- task: Bash@3
  displayName: "Collect workspace details"
  inputs:
    targetType: 'inline'
    script: 'echo "##vso[task.setvariable variable=workspace]$(cat environment_to_deploy.json|awk -F'': '' ''/env/{print $2}''|sed ''s/"//g'')"'


# --- Minimal workspace handling: try select (allowed to fail), then create if select failed ---
- task: TerraformCLI@2
  displayName: "Try select workspace"
  inputs:
    command: 'workspace'
    workspaceSubCommand: 'select'
    workspaceName: '$(workspace)'
    allowTelemetryCollection: false
  continueOnError: true

- task: TerraformCLI@2
  displayName: "Create workspace if missing"
  condition: failed()
  inputs:
    command: 'workspace'
    workspaceSubCommand: 'new'
    workspaceName: '$(workspace)'
    allowTelemetryCollection: false
    skipExistingWorkspace: true

- task: TerraformCLI@2
  displayName: "Select workspace"
  inputs:
    command: 'workspace'
    allowTelemetryCollection: true
    workspaceName: '$(workspace)'

- task: TerraformCLI@2
  displayName: "Validate terraform code"
  inputs:
    command: 'validate'
    allowTelemetryCollection: true

- task: TerraformCLI@2
  displayName: "Terraform plan"
  inputs:
    command: 'plan'
    environmentServiceName: 'Free (fdfb7214-0920-4357-adc9-606754ea4522)'
    runAzLogin: true
    commandOptions: '-var-file $(workspace).tfvars'
    allowTelemetryCollection: true
